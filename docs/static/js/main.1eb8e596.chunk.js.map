{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","handleInputChange","getGift","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GrifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","image","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"2MAoCeA,EAjCK,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEHC,mBAAS,IAFN,mBAEhCC,EAFgC,KAEpBC,EAFoB,KAiBvC,OACI,uBAAMC,SAVW,SAACC,GAClBA,EAAEC,iBAECJ,EAAWK,OAAOC,OAAS,IAC1BR,GAAc,SAACS,GAAD,OAAYP,GAAZ,mBAA2BO,OACzCN,EAAc,MAKlB,UACI,6BAAKD,IACL,uBACIQ,KAAK,OACLC,MAAOT,EACPU,SAAW,SAACP,GAAD,OAnBG,SAAEA,GACxBF,EAAcE,EAAEQ,OAAOF,OAkBGG,CAAkBT,U,+BC1BvCU,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEbC,EAFa,0DAE4CC,UAAUH,GAFtD,sDAGAI,MAAMF,GAHN,cAGbG,EAHa,gBAIEA,EAAKC,OAJP,uBAIZC,EAJY,EAIZA,KAEDC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAM,CACFC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAVvB,kBAaZM,GAbY,4CAAH,sDCYLO,EAVM,SAAC,GAAqB,EAApBJ,GAAqB,IAAjBC,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAE9B,OACI,sBAAKc,UAAU,yCAAf,UACI,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,QCuBDO,EAzBC,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SAAc,ECFJ,SAAEA,GAAc,IAAD,EAEdf,mBAAS,CAC/BsB,KAAM,GACNa,SAAS,IAJ2B,mBAEjCC,EAFiC,KAE1BC,EAF0B,KA4BvC,OArBAC,qBAAW,WACPxB,EAAQC,GAAUwB,MAAK,SAAAC,GAEfH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAYtB,CAACpB,IAIGqB,EDxBwBK,CAAc1B,GAAjCa,EAFgB,EAErBN,KAAaa,EAFQ,EAERA,QAEpB,OACI,eAAC,WAAD,WACI,6BAAKpB,IAEHoB,GAAW,mBAAGJ,UAAU,mCAAb,qBAEb,qBAAKA,UAAU,YAAf,SAEQH,EAAOJ,KAAI,SAAAkB,GAAK,OACZ,cAAC,EAAD,eAEQA,GADCA,EAAMhB,aEUxBiB,EA1BM,WAAO,IAAD,EAEa3C,mBAAS,CAAC,cAFvB,mBAEhB4C,EAFgB,KAEJ7C,EAFI,KAQvB,OACI,eAAC,WAAD,WACI,8CACA,cAAC,EAAD,CAAaA,cAAgBA,IAC7B,uBACA,6BAEQ6C,EAAWpB,KAAI,SAACT,GAAD,OACX,cAAC,EAAD,CAEIA,SAAUA,GADLA,YCfjC8B,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.1eb8e596.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport PropTypes from 'prop-types';\n\nconst AddCategory = ({ setCategories }) => {\n\n    const [inputValue, setInputValue] = useState('');\n\n    const handleInputChange = ( e ) => {\n        setInputValue(e.target.value);\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n\n        if(inputValue.trim().length > 2){\n            setCategories((cats) => [ inputValue, ...cats]);\n            setInputValue('');\n        }\n    }\n\n    return (\n        <form onSubmit={ handleSubmit }>\n            <h1>{inputValue}</h1>\n            <input\n                type=\"text\"\n                value={inputValue}\n                onChange={ (e) => handleInputChange(e)}\n            />\n        </form>\n    );\n};\n\nAddCategory.propTypes ={\n    setCategories: PropTypes.func.isRequired\n}\n\nexport default AddCategory;\n","export const getGift = async (category) => {\n\n    const url = `https://api.giphy.com/v1/gifs/search?limit=10&q=${encodeURI(category)}&api_key=JhBNs8N2guiqSj35rfVg9M99DgRnsxHQ`;\n    const resp = await fetch(url);\n    const {data} = await resp.json();\n\n    const gifs = data.map(img => {\n        return{\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url\n        }\n    });\n    return gifs;\n}\n","import React from 'react';\n\nconst GrifGridItem = ({id, title, url}) => {\n\n    return (\n        <div className=\"card animate__animated animate__fadeIn\">\n            <img src={url} alt={title}/>\n            <p>{title}</p>\n        </div>\n    );\n};\n\nexport default GrifGridItem;\n","import React, {Fragment} from 'react';\nimport {useFetchGifs} from \"../hooks/useFetchGifs\";\nimport GrifGridItem from \"./GifGridItem\";\n// import {getGift} from \"../helpers/getGifs\";\n\nconst GifGrid = ({category}) => {\n\n    const {data:images, loading} = useFetchGifs( category );\n\n    return (\n        <Fragment>\n            <h3>{category}</h3>\n\n            { loading && <p className=\"animate__animated animate__flash\">Loading</p> }\n\n            <div className=\"card-grid\">\n                {\n                    images.map(image => (\n                        <GrifGridItem\n                            key={image.id}\n                            {...image}\n                        />\n                    ))\n                }\n            </div>\n        </Fragment>\n\n    );\n};\n\nexport default GifGrid;\n","import { useState, useEffect } from 'react';\nimport {getGift} from \"../helpers/getGifs\";\n\nexport const useFetchGifs = ( category ) =>{\n\n   const [state, setState] = useState({\n       data: [],\n       loading: true\n   });\n\n    useEffect( () => {\n        getGift(category).then(imgs => {\n\n                setState({\n                    data: imgs,\n                    loading: false\n                });\n\n            // setTimeout(() => {\n            //     setState({\n            //         data: imgs,\n            //         loading: false\n            //     });\n            // },3000);\n\n\n        })\n    }, [category])\n\n\n\n    return state; // {data: [], loading: true}\n}\n","import React, {Fragment, useState} from 'react';\nimport AddCategory from \"./components/AddCategory\";\nimport GifGrid from \"./components/GifGrid\";\nconst GifExpertApp = () => {\n\n    const [categories, setCategories] = useState(['One Punch']);\n\n    // const handleAdd = () => {\n    //     setCategories([...categories, 'categoria nueva']);\n    // }\n\n    return (\n        <Fragment>\n            <h2>GifExpertApp</h2>\n            <AddCategory setCategories={ setCategories }></AddCategory>\n            <hr/>\n            <ol>\n                {\n                    categories.map((category) => (\n                        <GifGrid\n                            key={category}\n                            category={category}/>\n                        ))\n                }\n            </ol>\n        </Fragment>\n    );\n};\n\nexport default GifExpertApp;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GifExpertApp from \"./GifExpertApp\";\n\nReactDOM.render(\n    <GifExpertApp/>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}